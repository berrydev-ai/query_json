name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.21', '1.22', '1.23']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          echo "Please run 'go fmt ./...' to format your code."
          exit 1
        fi
      shell: bash
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Test build
      run: go build -v ./...
    
    - name: Test cross-compilation
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      run: |
        GOOS=windows GOARCH=amd64 go build -o query_json-windows.exe
        GOOS=darwin GOARCH=amd64 go build -o query_json-darwin
        GOOS=linux GOARCH=amd64 go build -o query_json-linux

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out results.sarif ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Run Nancy vulnerability scanner
      run: |
        go install github.com/sonatypecommunity/nancy@latest
        go list -json -deps ./... | nancy sleuth
    
    - name: Check for outdated dependencies
      run: |
        go install github.com/psampaz/go-mod-outdated@latest
        go list -u -m -json all | go-mod-outdated -update -direct

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Build binary
      run: go build -o query_json
    
    - name: Test with example data
      run: |
        echo '{"users": [{"name": "Alice", "age": 30}, {"name": "Bob", "age": 25}]}' > test_data.json
        
        # Test basic queries
        ./query_json --query '$.users[0].name' ./test_data.json | grep -q "Alice"
        ./query_json --query '$.users[*].name' --raw ./test_data.json | grep -q "Alice"
        ./query_json --query '$.users[*].name' --raw ./test_data.json | grep -q "Bob"
        ./query_json --query '$.users[?(@.age > 25)]' ./test_data.json | grep -q "Alice"

        # Test version flag
        ./query_json --version | grep -q "query_json version"
        
        echo "All integration tests passed!"
    
    - name: Test error cases
      run: |
        # Test invalid JSON
        echo '{"invalid": json}' > invalid.json
        if ./query_json invalid.json --query '$.test' 2>/dev/null; then
          echo "Should have failed with invalid JSON"
          exit 1
        fi
        
        # Test missing file
        if ./query_json nonexistent.json --query '$.test' 2>/dev/null; then
          echo "Should have failed with missing file"
          exit 1
        fi
        
        # Test invalid query
        echo '{}' > empty.json
        if ./query_json empty.json --query 'invalid_query' 2>/dev/null; then
          echo "Should have failed with invalid query"
          exit 1
        fi
        
        echo "Error case tests passed!"